/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiChatPost$Json } from '../fn/chat/api-chat-post-json';
import { ApiChatPost$Json$Params } from '../fn/chat/api-chat-post-json';
import { apiChatPost$Plain } from '../fn/chat/api-chat-post-plain';
import { ApiChatPost$Plain$Params } from '../fn/chat/api-chat-post-plain';

@Injectable({ providedIn: 'root' })
export class ChatService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiChatPost()` */
  static readonly ApiChatPostPath = '/api/Chat';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChatPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChatPost$Plain$Response(params?: ApiChatPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return apiChatPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChatPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChatPost$Plain(params?: ApiChatPost$Plain$Params, context?: HttpContext): Observable<any> {
    return this.apiChatPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChatPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChatPost$Json$Response(params?: ApiChatPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return apiChatPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChatPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChatPost$Json(params?: ApiChatPost$Json$Params, context?: HttpContext): Observable<any> {
    return this.apiChatPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
