/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGeminiChatChatIdPost$Json } from '../fn/gemini-chat/api-gemini-chat-chat-id-post-json';
import { ApiGeminiChatChatIdPost$Json$Params } from '../fn/gemini-chat/api-gemini-chat-chat-id-post-json';
import { apiGeminiChatChatIdPost$Plain } from '../fn/gemini-chat/api-gemini-chat-chat-id-post-plain';
import { ApiGeminiChatChatIdPost$Plain$Params } from '../fn/gemini-chat/api-gemini-chat-chat-id-post-plain';

@Injectable({ providedIn: 'root' })
export class GeminiChatService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiGeminiChatChatIdPost()` */
  static readonly ApiGeminiChatChatIdPostPath = '/api/GeminiChat/{chatId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGeminiChatChatIdPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGeminiChatChatIdPost$Plain$Response(params: ApiGeminiChatChatIdPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return apiGeminiChatChatIdPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGeminiChatChatIdPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGeminiChatChatIdPost$Plain(params: ApiGeminiChatChatIdPost$Plain$Params, context?: HttpContext): Observable<any> {
    return this.apiGeminiChatChatIdPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGeminiChatChatIdPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGeminiChatChatIdPost$Json$Response(params: ApiGeminiChatChatIdPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return apiGeminiChatChatIdPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGeminiChatChatIdPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiGeminiChatChatIdPost$Json(params: ApiGeminiChatChatIdPost$Json$Params, context?: HttpContext): Observable<any> {
    return this.apiGeminiChatChatIdPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
